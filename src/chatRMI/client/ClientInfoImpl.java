package chatRMI.client;

import chatRMI.remoteInterfaces.ClientInfo;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Objects;
import java.util.logging.Logger;

public class ClientInfoImpl extends UnicastRemoteObject implements ClientInfo {
    private static Logger logger;

    private final String name;

    public ClientInfoImpl(String name) throws RemoteException {
        this.name = name;

        logger = Logger.getLogger("clientInfo");
    }

    /**
     * Called once, when the client logs into the server
     *
     * @param status Whether the login is successful or not
     */
    @Override
    public void loginCallback(boolean status) {
        if (status) {
            logger.info("Login successful");
        } else {
            logger.severe("Error");
            System.exit(1);
        }
    }

    /**
     * Called when someone else joins the server
     *
     * @param other The client that just logged in
     */
    @Override
    public void otherLoginCallback(ClientInfo other) throws RemoteException {
        logger.info(other.getName() + " joined the chat");
    }

    /**
     * Called when someone (self included) sends a message to the server.
     *
     * @param client  The sender of the message
     * @param message The message
     */
    @Override
    public void messageReceivedCallback(ClientInfo client, String message) throws RemoteException {
        System.out.println(client.getName() + " : " + message);
    }

    /**
     * Called once, when the client logs out of the server
     *
     * @param status Whether the logout is successful or not
     */
    @Override
    public void logoutCallback(boolean status) {
        if (status) {
            logger.info("Logout successful");
        } else {
            logger.severe("Error");
            System.exit(1);
        }
    }

    /**
     * Called when someone else leaves the server
     *
     * @param other The client that just logged out
     */
    @Override
    public void otherLogoutCallback(ClientInfo other) throws RemoteException {
        logger.info(other.getName() + " left the chat");
    }

    @Override
    public String getName() {
        return this.name;
    }

    // Automatically generated by IntelliJ
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ClientInfoImpl that = (ClientInfoImpl) o;

        return Objects.equals(name, that.name);
    }

    // Automatically generated by IntelliJ
    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (name != null ? name.hashCode() : 0);
        return result;
    }
}
